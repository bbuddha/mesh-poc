version: '3.5'

services:

  #
  # Kuma Control Plane in "universal" mode with "in-memory" configuration store.
  #
  petclinic-cp:
    image: ${KUMA_CP_DOCKER_IMAGE:-kuma/kuma-cp:latest}
    container_name: petclinic-cp
    volumes:
      - ./certs/server:/certs/server:rw
      - ./certs/client:/certs/client:rw
      - ../pet-clinic-logs/kuma-cp:/tmp
    command:
      - run
      - --log-level=debug
      - --log-output-path=/tmp/kuma-cp.log
    environment:
      # DNS name of the Kuma xDS server
      - KUMA_GENERAL_TLS_CERT_FILE=/certs/server/cert.pem
      - KUMA_GENERAL_TLS_KEY_FILE=/certs/server/cert.key
      - KUMA_API_SERVER_AUTHN_TYPE=adminClientCerts
      - KUMA_API_SERVER_AUTH_CLIENT_CERTS_DIR=/certs/client
      - KUMA_EXPERIMENTAL_MESHGATEWAY=true
      - KUMA_REPORTS_ENABLED=true
    expose:
      - "5678"
      - "5680"
      - "5681"
      - "5682"
    ports:
      - "5678:5678"
      - "5680:5680"
      - "5681:5681"
      - "5682:5682"
    networks:
      petclinic:
    restart: on-failure

  #
  # Run the kuma configuration script for the application
  #
  create-dp-token:
    image: ${KUMACTL_DOCKER_IMAGE:-kuma/kumactl:latest}
    container_name: create-dp-token
    volumes:
      - ./setup:/petclinic
      - token-customers-service:/customers-service:rw
      - token-visits-service:/visits-service:rw
      - token-vets-service:/vets-service:rw
      - token-vets-service-v2:/vets-service-v2:rw
      - token-offers-service:/offers-service:rw
      - token-api-gateway:/api-gateway:rw
      - token-mesh-gateway:/mesh-gateway:rw
      - ./certs/server:/certs/server:rw
      - ./certs/client:/certs/client:rw
    user: root # needed to write the tokens, named volumes are mounted with root permissions
    command:
      - /petclinic/create_dp_token.sh
    environment:
      - KUMA_CONTROL_PLANE_URL=https://petclinic-cp:5678
    depends_on:
      - petclinic-cp
    networks:
      petclinic:
    restart: on-failure

  #
  # Run the kuma configuration script for the application
  #
  configure-petclinic:
    image: ${KUMACTL_DOCKER_IMAGE:-kuma/kumactl:latest}
    container_name: configure-petclinic
    volumes:
      - ./setup:/petclinic
      - ./policies:/petclinic/policies:rw
      - token-customers-service:/customers-service:rw
      - token-visits-service:/visits-service:rw
      - token-vets-service:/vets-service:rw
      - token-vets-service-v2:/vets-service-v2:rw
      - token-offers-service:/offers-service:rw
      - token-api-gateway:/api-gateway:rw
      - token-mesh-gateway:/mesh-gateway:rw
      - ./certs/server:/certs/server:rw
      - ./certs/client:/certs/client:rw
    user: root # needed to write the tokens, named volumes are mounted with root permissions
    command:
      - /petclinic/configure_dataplane.sh
    depends_on:
      - petclinic-cp
      - customers-service-dp
      - visits-service-dp
      - vets-service-dp
      - offers-service-dp
      - api-gateway-dp
      - mesh-gateway
    networks:
      petclinic:
    restart: on-failure

  #
  # Container with `kumactl` to apply Kuma resources as part of workflow.
  #
  kumactl:
    image: ${KUMACTL_DOCKER_IMAGE:-kuma/kumactl:latest}
    container_name: kumactl
    volumes:
      - ./policies:/petclinic/policies
    command:
      - sh
      - -c
      - kumactl config control-planes add --name universal --address http://petclinic-cp:5681 --overwrite && sleep 31536000
    depends_on:
      - petclinic-cp
    networks:
      petclinic:
    restart: on-failure

  config-server:
    image: charter/spring-petclinic-config-server
    container_name: config-server
    mem_limit: 512M
    networks:
      petclinic:
    ports:
     - "8888:8888"

  customers-service-app:
    image: charter/spring-petclinic-customers-service
    container_name: customers-service-app
    mem_limit: 512M
    environment:
      - spring.zipkin.base-url=http://jaeger-collector:9412/
      - LOG_FILE=/tmp/customers-service-app.log
      - CONFIG_SERVER_URL=http://config-server:8888
    depends_on:
     - config-server
     - customers-service-dp
    entrypoint: ["./dockerize","-wait=tcp://config-server:8888","-timeout=60s","--","java", "org.springframework.boot.loader.JarLauncher"]
    network_mode: service:customers-service-dp
    volumes:
      - ../pet-clinic-logs/app:/tmp

  customers-service-dp:
    image: ${KUMA_DP_DOCKER_IMAGE:-kuma/kuma-dp:latest}
    container_name: customers-service-dp
    command:
      - run
      - --log-level=info
    environment:
      - KUMA_CONTROL_PLANE_URL=https://petclinic-cp:5678
      - KUMA_DATAPLANE_MESH=default
      - KUMA_DATAPLANE_NAME=customers-service
      - KUMA_DATAPLANE_RUNTIME_TOKEN_PATH=/customers-service/token
    networks:
      petclinic:
        aliases:
          - customers-service
    restart: on-failure
    depends_on:
      - create-dp-token
    volumes:
      - token-customers-service:/customers-service
      - ../pet-clinic-logs/customers-service-dp:/tmp

  visits-service-app:
    image: charter/spring-petclinic-visits-service
    container_name: visits-service-app
    mem_limit: 512M
    environment:
      - spring.zipkin.base-url=http://jaeger-collector:9412/
      - LOG_FILE=/tmp/visits-service-app.log
      - CONFIG_SERVER_URL=http://config-server:8888
    depends_on:
     - config-server
     - visits-service-dp
    entrypoint: ["./dockerize","-wait=tcp://config-server:8888","-timeout=60s","--","java", "org.springframework.boot.loader.JarLauncher"]
    network_mode: service:visits-service-dp
    volumes:
      - ../pet-clinic-logs/app:/tmp

  visits-service-dp:
    image: ${KUMA_DP_DOCKER_IMAGE:-kuma/kuma-dp:latest}
    container_name: visits-service-dp
    command:
      - run
      - --log-level=info
    environment:
      - KUMA_CONTROL_PLANE_URL=https://petclinic-cp:5678
      - KUMA_DATAPLANE_MESH=default
      - KUMA_DATAPLANE_NAME=visits-service
      - KUMA_DATAPLANE_RUNTIME_TOKEN_PATH=/visits-service/token
    networks:
      petclinic:
        aliases:
          - visits-service
    restart: on-failure
    depends_on:
      - create-dp-token
    volumes:
      - token-visits-service:/visits-service
      - ../pet-clinic-logs/visits-service-dp:/tmp

  vets-service-app:
    image: charter/spring-petclinic-vets-service
    container_name: vets-service-app
    environment:
      - spring.datasource.data=classpath*:db/hsqldb/data.sql
      - spring.zipkin.base-url=http://jaeger-collector:9412/
      - LOG_FILE=/tmp/vets-service-app.log
      - CONFIG_SERVER_URL=http://config-server:8888
    mem_limit: 512M
    depends_on:
      - config-server
      - vets-service-dp
    entrypoint: ["./dockerize","-wait=tcp://config-server:8888","-timeout=60s","--","java", "org.springframework.boot.loader.JarLauncher"]
    network_mode: service:vets-service-dp
    volumes:
      - ../pet-clinic-logs/app:/tmp

  vets-service-dp:
    image: ${KUMA_DP_DOCKER_IMAGE:-kuma/kuma-dp:latest}
    container_name: vets-service-dp
    command:
      - run
      - --log-level=info
    environment:
      - KUMA_CONTROL_PLANE_URL=https://petclinic-cp:5678
      - KUMA_DATAPLANE_MESH=default
      - KUMA_DATAPLANE_NAME=vets-service
      - KUMA_DATAPLANE_RUNTIME_TOKEN_PATH=/vets-service/token
    networks:
      petclinic:
        aliases:
          - vets-service
    restart: on-failure
    depends_on:
      - create-dp-token
    volumes:
      - token-vets-service:/vets-service
      - ../pet-clinic-logs/vets-service-dp:/tmp

  vets-service-v2-app:
    image: charter/spring-petclinic-vets-service
    container_name: vets-service-v2-app
    environment:
      - spring.datasource.data=classpath*:db/hsqldb/data2.sql
      - spring.zipkin.base-url=http://jaeger-collector:9412/
      - LOG_FILE=/tmp/vets-service-v2-app.log
      - CONFIG_SERVER_URL=http://config-server:8888
    mem_limit: 512M
    depends_on:
      - config-server
      - vets-service-v2-dp
    entrypoint: ["./dockerize","-wait=tcp://config-server:8888","-timeout=60s","--","java", "org.springframework.boot.loader.JarLauncher"]
    network_mode: service:vets-service-v2-dp
    volumes:
      - ../pet-clinic-logs/app:/tmp

  vets-service-v2-dp:
    image: ${KUMA_DP_DOCKER_IMAGE:-kuma/kuma-dp:latest}
    container_name: vets-service-v2-dp
    command:
      - run
      - --log-level=info
    environment:
      - KUMA_CONTROL_PLANE_URL=https://petclinic-cp:5678
      - KUMA_DATAPLANE_MESH=default
      - KUMA_DATAPLANE_NAME=vets-service-v2
      - KUMA_DATAPLANE_RUNTIME_TOKEN_PATH=/vets-service-v2/token
    networks:
      petclinic:
        aliases:
          - vets-service-v2
    restart: on-failure
    depends_on:
      - create-dp-token
    volumes:
      - token-vets-service-v2:/vets-service-v2
      - ../pet-clinic-logs/vets-service-v2-dp:/tmp

  offers-service-app:
    image: charter/spring-petclinic-offers-service
    container_name: offers-service-app
    mem_limit: 512M
    environment:
      - spring.zipkin.base-url=http://jaeger-collector:9412/
      - CONFIG_SERVER_URL=http://config-server:8888
      - LOG_FILE=/tmp/offers-service-app.log
    depends_on:
      - config-server
      - offers-service-dp
    entrypoint: ["./dockerize","-wait=tcp://config-server:8888","-timeout=60s","--","java", "org.springframework.boot.loader.JarLauncher"]
    network_mode: service:offers-service-dp
    volumes:
      - ../pet-clinic-logs/app:/tmp

  offers-service-dp:
    image: ${KUMA_DP_DOCKER_IMAGE:-kuma/kuma-dp:latest}
    container_name: offers-service-dp
    command:
      - run
      - --log-level=info
    environment:
      - KUMA_CONTROL_PLANE_URL=https://petclinic-cp:5678
      - KUMA_DATAPLANE_MESH=default
      - KUMA_DATAPLANE_NAME=offers-service
      - KUMA_DATAPLANE_RUNTIME_TOKEN_PATH=/offers-service/token
    ports:
      - "8085:8085"
    networks:
      petclinic:
        aliases:
          - offers-service
    restart: on-failure
    depends_on:
      - create-dp-token
    volumes:
      - token-offers-service:/offers-service
      - ../pet-clinic-logs/offers-service-dp:/tmp

  api-gateway-app:
    image: charter/spring-petclinic-api-gateway
    container_name: api-gateway-app
    mem_limit: 512M
    environment:
      - spring.zipkin.base-url=http://jaeger-collector:9412/
      - LOG_FILE=/tmp/api-gateway-app.log
      - CONFIG_SERVER_URL=http://config-server:8888
    depends_on:
      - config-server
      - api-gateway-dp
    entrypoint: ["./dockerize","-wait=tcp://config-server:8888","-timeout=60s","--","java", "org.springframework.boot.loader.JarLauncher"]
    network_mode: service:api-gateway-dp
    volumes:
      - ../pet-clinic-logs/app:/tmp

  api-gateway-dp:
    image: ${KUMA_DP_DOCKER_IMAGE:-kuma/kuma-dp:latest}
    container_name: api-gateway-dp
    command:
      - run
      - --log-level=info
    environment:
      - KUMA_CONTROL_PLANE_URL=https://petclinic-cp:5678
      - KUMA_DATAPLANE_MESH=default
      - KUMA_DATAPLANE_NAME=api-gateway
      - KUMA_DATAPLANE_RUNTIME_TOKEN_PATH=/api-gateway/token
    networks:
      petclinic:
        aliases:
          - api-gateway
    ports:
      - "8000:8000"
    restart: on-failure
    depends_on:
      - create-dp-token
    volumes:
      - token-api-gateway:/api-gateway
      - ../pet-clinic-logs/api-gateway-dp:/tmp

  mesh-gateway:
    image: ${KUMA_DP_DOCKER_IMAGE:-kuma/kuma-dp:latest}
    command:
      - run
      - --log-level=debug
      - --log-output-path=/tmp/kuma-dp.log
      - --dns-enabled=false
    environment:
      - KUMA_CONTROL_PLANE_URL=https://petclinic-cp:5678
      - KUMA_DATAPLANE_MESH=default
      - KUMA_DATAPLANE_NAME=mesh-gateway
      - KUMA_DATAPLANE_RUNTIME_TOKEN_PATH=/mesh-gateway/token
    ports:
      - "8080:8080"
    networks:
      petclinic:
        aliases:
          - mesh-gateway
    restart: on-failure
    volumes:
      - token-mesh-gateway:/mesh-gateway
      - ./policies:/petclinic/policies
      - ../pet-clinic-logs/mesh-gateway:/tmp
    depends_on:
      - petclinic-cp
      - create-dp-token


  jaeger-collector:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger-collector
    mem_limit: 512M
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9412
    networks:
      petclinic:
    ports:
      - "9412:9412"
      - "16686:16686"

  ## Grafana / Prometheus

  grafana-server:
    image: grafana/grafana:master
    mem_limit: 256M
    networks:
      petclinic:
    ports:
    - "3000:3000"

  prometheus-server:
    image: prom/prometheus:latest
    container_name: prometheus-server
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    mem_limit: 256M
    networks:
      petclinic:
    ports:
    - "9091:9090"

  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml -log.level=debug
    networks:
      - petclinic

  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    volumes:
      - ./conf:/etc/promtail
      - ../pet-clinic-logs:/tmp
    command: -config.file=/etc/promtail/docker-promtail-config.yaml -log.level=debug
    networks:
      - petclinic

  httpbin:
    image: kennethreitz/httpbin
    container_name: httpbin
    networks:
      - petclinic

networks:
  petclinic:

volumes:
  token-customers-service:
  token-visits-service:
  token-vets-service:
  token-vets-service-v2:
  token-offers-service:
  token-api-gateway:
  token-mesh-gateway:

